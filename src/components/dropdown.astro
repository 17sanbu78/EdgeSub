---
import { Icon } from "astro-icon/components";
import type { arrayOutputType } from "astro/zod";

interface Props {
    Items: any[];
    Default?: any;
}
const {
    Items,
    Default = {
        key: "还未选择",
        value: "__NULL__"
    }
} = Astro.props;
---


<k-dropdown data-onfocus="false" data-selected-value={Default.value}>
    <button>
        <span>{Default.key}</span>
        <Icon name="iconoir:arrow-down-tag" />
    </button>
    <div class="dropdown-content">
        {Items.map(i => {
            return (<button data-value={i.value}>{i.key}</button>)
        })}
    </div>
</k-dropdown>

<script>
    export class Dropdown extends HTMLElement {
        constructor () {
            super();

            this.Elements.DropdownBotton.addEventListener("click", () => {
                this.dataset.onfocus = 
                    this.dataset.onfocus === "false"
                     ? "true"
                     : "false"
            }) 

            for (let i of this.Elements.Items) {
                i.addEventListener("click", (event) => {
                    for (let i of this.Elements.Items) {
                        i.dataset.selected = "false"
                    }

                    event.target.dataset.selected = "true";
                    this.Elements.DropdownBottonText.innerText = event.target.innerText;
                    this.dataset.selectedValue = event.target.dataset.value;
                })

            }
        }
        Elements = {
            DropdownBotton: this.querySelector("button"),
            DropdownBottonText: this.querySelector("button > span"),
            Items: this.querySelectorAll(".dropdown-content > button")
        }
    }
    customElements.define("k-dropdown", Dropdown);
</script>


<style lang="scss">
    k-dropdown {
        position: relative;
        display: block;
        width: 100%;

        > button {
            
            background-color: #bbc5e8;
            color: #25304c;

            padding: 12px 18px;
            border-radius: 25px;

            border: none;
            cursor: pointer;


            width: 100%;
            
            display: flex;
            justify-content: space-between;

            [data-icon] {
                color: #25304c;
                transition: transform 0.3s ease;
            }
        }

        &[data-onfocus="true"] > button > [data-icon] {
            transform: rotate(180deg);
        }

        .dropdown-content {
            width: 100%;
            max-height: 320px;
            overflow: scroll;
            padding: 20px 0;
            border-radius: 14px;
            margin-top: -10px;

            position: absolute;

            background-color: #1b1a1f;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
            z-index: 1;

            

            button {
                background-color: #1b1a1f;
                color: #d8e1fe;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
                border: none;
                width: 100%;

                transition: background-color 0.2s ease;

                &:hover {
                    background-color: #424252;
                }
                &[data-selected="true"] {
                    background-color: #363940;
                }
            }
        }



        /* on blur */
        .dropdown-content {
            transition: all 0.3s ease;
            pointer-events: none;
            opacity: 0;
            transform: translateY(15px);
        }

        /* on focus */
        &[data-onfocus="true"] {
            .dropdown-content {
                pointer-events: all;
                opacity: 1;
                transform: translateY(0);
            }
        }
    }

</style>

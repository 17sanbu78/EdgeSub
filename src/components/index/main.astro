---
import Dropdown from "@components/dropdown.astro";
import Toggle from "@components/toggle.astro";
import Spliter from "@components/spliter.astro";
import { RemoteConfigs } from "@config/RemoteConfigs.js";
import { Endpoints } from "@config/AvalibleOptoutFormat.js"
---

<div class="contents">
    <div class="form-con" id="sub-url">
        <label>订阅链接</label>
        <textarea placeholder="仅支持 http(s):// 开头的订阅链接, 类似于 vless:// 开头的分享链接。以换行分割。" />
    </div>
    <div class="form-con" id="backend">
        <label>后端地址</label>
        <input placeholder="默认为当前站点" />
    </div>
    <div class="form-con" id="endpoint">
        <label>输出格式</label>
        <Dropdown Items={Endpoints} />
    </div>
    <div class="form-con" id="remote-config">
        <label>远程配置</label>
        <Dropdown Items={RemoteConfigs} />
    </div>
    <div class="form-con" id="is-udp">
        <label>开启 UDP (SS 使用 UoT)</label>
        <Toggle checked={true} />
    </div>
    
    <Spliter />

    <code>https://OpenWrt.lan/luci/123" OR ""==" </code>
    <button id="generate">Generate</button>
</div>
<script>
import type { string } from "astro/zod";


    addEventListener("DOMContentLoaded", () => {
        let URLObj = new URL(location.href);
        URLObj.pathname = "/";
        URLObj.search = "";
        URLObj.hash = "";

        let defaultBackend = URLObj.toString() === "http://localhost:4321/" ? "http://localhost:8788/" : URLObj.toString();

        document.querySelector(".contents > #backend > input").placeholder += ` (${defaultBackend})`;
        document.querySelector(".contents > #backend > input").dataset.defaultBackend = defaultBackend;

    })

    document.querySelector(".contents > button#generate").addEventListener("click", CheckAndSubmit);

    function CheckAndSubmit () {
        let MotherCon = document.querySelector(".contents");

        let Config = {
            SubURL: MotherCon.querySelector("#sub-url > textarea").value.replaceAll("\r", "\n").split("\n").filter((i: string) => !!i).map(i => encodeURIComponent(i.trim())).join("||"),
            Backend: MotherCon.querySelector("#backend > input").value || document.querySelector(".contents > #backend > input").dataset.defaultBackend,
            Endpoint: MotherCon.querySelector("#endpoint > k-dropdown").dataset.selectedValue,
            RemoteConfig: MotherCon.querySelector("#remote-config > k-dropdown").dataset.selectedValue,
            isUDP: MotherCon.querySelector("#is-udp > k-switch").dataset.checked,
        }

        let ErrorState = false;
        for (let i in Config) {
            if (!Config[i] || Config[i] === "__NULL__" || Config[i].length === 0) {
                alert(`${i} can't be empty`);
                ErrorState = true;
                continue;
            }
        }
        if (ErrorState === true) {
            return;
        }

        MotherCon.querySelector("code").innerText = GenerateSubURL(Config);

    }
    function GenerateSubURL (Config: { SubURL: any; Backend: any; Endpoint: any; RemoteConfig: any; isUDP: any; }) {
        let URLObj = new URL(Config.Backend);
        URLObj.pathname = Config.Endpoint;
        URLObj.search = "";
        URLObj.hash = "";

        URLObj.searchParams.append("url", Config.SubURL)
        URLObj.searchParams.append("remote_config", Config.RemoteConfig)
        URLObj.searchParams.append("udp", Config.isUDP)
        return URLObj.toString();
    }
</script>



<style lang="scss">
    .contents {
        padding: 24px 30px;
        display: flex;
        flex-wrap: wrap;
        flex-flow: column;
        gap: 12px
    }
    .form-con {
        display: flex;
        align-items: center;
        gap: 8px;
        label {
            margin-bottom: 0.125rem;
            white-space: nowrap;
            &::before {
                content: "";
                display: inline-block;
                height: 14px;
                width: 4px;
                background-color: #7fffd4;
                margin: auto 0;
                border-radius: 10px;
                margin-right: 8px;
                margin-bottom: -0.075rem;
            }
        }
        textarea {
            @extend input;
            resize: none;
            height: 75px;
        }
        input {
            width: 100%;
            border: none;
            background-color: #bbc5e8;
            color: #25304c;
            padding: 12px 18px;
            border-radius: 25px;
        }
    }
    button {
        width: 100%;
        border: none;
        background-color: #bbc5e8;
        color: #25304c;
        padding: 12px 18px;
        border-radius: 25px;
    }
    code {
        background-color: #1f2229;
        padding: 12px 18px;
        border-radius: 8px;
        word-break: break-all;
    }

</style>